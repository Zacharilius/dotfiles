# (This script is only intended to be run in interactive shells.)

echo "Executing: .bashrc"

# Prompt
case `id -u` in
      0) PCHAR="#";;
      *) PCHAR="\$";;
esac
PS1='\[\e[0;32m\][\u\[\e[1;34m\] \w\[\e[0;32m\]]\[\e[0;32m\]${PCHAR} \[\e[m\]'

# ls colors
# See the 'ls' manpage for more info about LSCOLORS
# Affect: ddllssppeebbccuuggdddd"
LSCOLORS="exfxcxdxbxegedabagacad"
alias ls='ls -G '

# ll
alias ll='ls -l '

# grep colors
alias grep='grep --color=auto'

# This script
DOTFILES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
alias editrc='edit ~/.bashrc'
alias editrc2='edit "$DOTFILES_DIR/.bashrc_shared"'
alias refresh='source ~/.bashrc'
alias reload=refresh

# Personal bin directories
PATH="$PATH:$HOME/bin"          # local
PATH="$PATH:$DOTFILES_DIR/bin"  # shared

# CVS
EDITOR=nano
VISUAL="${EDITOR}"

# SVN
SVN_EDITOR=nano
alias sup='svn up '
alias sci='svn ci '
alias sst='svn status '
alias sdi='svn diff '

# Git
export GIT_EDITOR=nano
alias gd='gitx --diff -w '      # Diff using GitX. Ignore whitespace.
alias gdh='gd HEAD'             # Diff filesystem to HEAD.
gdc () { gd $1^ $1; }           # Show changes in a particular commit.
alias gdch='gdc HEAD'           # Show changes in the last commit.
gdcst () { gd stash@{$1}^ stash@{$1}; } # Show changes in a stashed commit.
alias gs='git status'           # Summarize filesystem changes relative to HEAD.
alias gb='git branch'
alias gbd='git branch -d '      # Delete local branch only.
gbd2 () {                       # Delete remote & local (if present) branches.
    git push origin :$1;
    git branch -d $1;
}
alias gx='gitx --all'                       # Open GitX and show all branches.
alias gcam='git add -A; git commit -m '     # Commit everything in filesystem.
alias gaa='git add -A'                      # Stage everything in filesystem.
alias gc='git checkout '                    # Checkout branch.
alias gcb='git checkout -b '                # Create branch and checkout.
alias gri='git rebase -i '                  # Interactive rebase: Squash, reorder, amend, and edit unpublished commits.
alias gcp='git cherry-pick '
gmb () { git checkout $1 && git merge $2 && git branch -d $2; }
alias gstl='git stash list'                 # List stashed commits.
alias gsts='git stash save'                 # Stash a new commit.
gsta () { git stash apply "stash@{$1}"; }   # Apply a stashed commit to the filesystem.
gstd () { git stash drop "stash@{$1}"; }    # Delete a stashed commit.
gpo () {                                    # Push local commits to origin repository.
    CURRENT_BRANCH=`git status | head -n 1 | cut -c 13-` &&
    git push -u origin "$CURRENT_BRANCH";
}
alias gf='git fetch -p '                    # Fetch commits from remote repository (usually origin) and
                                            #     delete local refs to remote branches that no longer exist.
alias gp='git pull '                        # Same as 'gf', but attempts to merge with the current branch.
ghooks () {                                 # Install shared Git hooks in local repository.
    ln -s "$DOTFILES_DIR/git_hooks/pre-commit" ./.git/hooks/pre-commit;
}

# GitHub
alias gh='open -a GitHub'
ghpr () {    # Creates a pull request on GitHub for the current branch.
    PWD=`pwd` &&
    REPO_PATH=`git config --get remote.origin.url | sed 's|git@github.com:\([^/]*\)/\([^.]*\).git|\1/\2|g'` &&
    CURRENT_BRANCH=`git status | head -n 1 | cut -c 13-` &&
    open "https://github.com/$REPO_PATH/pull/new/splunk:develop...$CURRENT_BRANCH";
}
alias gprc=ghpr

# Perforce
padd () {
    # Add file $1 or directory $1 (recursively) to the default changelist.
    # WARNING: Includes ALL files, such as *.pyc or *.o.
    find $1 -type f -print | p4 -x - add;
}
alias p4v='open -a p4v'             # Open visual Perforce client.
p4cr () {
    # Creates a code review for pending changelist $1 with message $2.
    # Requires banter <https://github.com/markdrago/banter> to be installed and configured.
    #   url: http://crucible.splunk.com/
    #   project_key: SPLCR
    #   default_reviewer: <your username>
    p4diff $1 | banter -t "$2"
}

# Windows emulation
alias dir=ls
dirs () { find . -iname "*$1*"; }   # dir /s <filename>
alias st='open .'                   # st -> start .

# SQLite
alias sqlite='rlwrap sqlite' # wrap with readline support

# DNS
# (If changes are made to the /etc/hosts file, use this to make the system notice)
alias reloadhosts='dscacheutil -flushcache'

# Text Editor
alias edit='bbedit'

# Markdown Editor
md () {
    [ ! -f "$1" ] && touch "$1";    # create if doesn't exist
    open -a Mou "$1";
}

# PNG Crush
pngc () { pngcrush "$1" "$1-"; }

# preman
# (This converts a MAN page to a Postscript file and then opens the Postscript
#  file in Preview. This is useful for reading long man pages.)
# (This is based on a script by Spencer Cohen.)
preman () {
    man -t $1 > /tmp/$1.ps &&
    open /tmp/$1.ps;
}

# backupsleep -- Perform a Time Machine Backup and then sleep the computer.
alias backupsleep="tmutil startbackup -b && osascript -e 'tell app \"Finder\" to sleep'"
